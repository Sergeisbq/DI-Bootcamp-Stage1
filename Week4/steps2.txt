Implementing Databases

1. in settings.py, specify the DATABASES part;
2. create new database (in PgAdmin, psql shell)
3. [in terminal] python manage.py migrate (!!!python manage.py makemigrations):
    - might get an error - pip install psycopg2 (or psycopg2-binary)

4. specify models inside the app folder, inside models.py
5. [in terminal] python manage.py makemigrations
6. [in terminal] python manage.py migrate
7. [in terminal] python manage.py shell 

    - importing and adding to database:
        from info.models import Animal, Family
        felidae = Family(name = 'Felidae') # adding an object to a Family
        felidae
            <Family: Family object (None)>
        felidae.save() # saving an object to a Family

                Examples:
                >>> from info.models import Animal, Family
                >>> felidae = Family(name = 'Felidae') a = VehicleSize(name = 'double')
                >>> felidae
                <Family: Family object (None)>
                >>> felidae.save()
                >>> felidae
                <Family: Family object (1)>
                >>> felidae = Family.objects.get(name='Felidae')
                >>> feliday
                Traceback (most recent call last):
                File "<console>", line 1, in <module>
                NameError: name 'feliday' is not defined
                >>> felidae
                <Family: Family object (1)>
                >>> animal = Animal(name = 'Domestic Cat', legs = 4, weight = 5.67, height = 4.2, speed = 34, family = felidae)
                >>> animal
                <Animal: Animal object (None)>
                >>> animal.save()
                >>> animal
                <Animal: Animal object (1)>
                >>> animal = Animal(name = 'Panther', legs = 4, weight = 5.67, height = 4.2, speed = 34, family = felidae)
                >>> animal
                <Animal: Animal object (None)>
                >>> animal.save()
                >>> animal
                <Animal: Animal object (2)>
                >>> canidae = Family(name = 'Canidae')
                >>> canidae.save()
                >>> canidae
                <Family: Family object (2)>
                >>> animal = Animal(name = 'Dog', legs = 4, weight = 5.67, height = 4.2, speed = 34, family = canidae)
                >>> animal
                <Animal: Animal object (None)>
                >>> animal.save()
                >>> animal
                <Animal: Animal 

to get multiple instances:
>> all_animal = Animal.objects.all()
>>> all_animal
<QuerySet [<Animal: Animal object (1)>, <Animal: Animal object (2)>, <Animal: Animal object (3)>]>
>>> all_animal[0].name
'Domestic Cat'
>>> all_animal[1].name
'Panther'
>>> 

person = Person(name = 'Alex Smith', email = 'alexx1@gmail.com', phone_number = '+546352745245', address = 'Bat Yam, Herz, 15')






(my_env) sergeiboiko@MacBook-Air-Sergej polls_rest % python manage.py shell
Python 3.11.1 (v3.11.1:a7a450f84a, Dec  6 2022, 15:24:06) [Clang 13.0.0 (clang-1300.0.29.30)] on darwin
Type "help", "copyright", "credits" or "license" for more information.
(InteractiveConsole)
>>> from posts.models import Post
>>> post = Post(title='Test', custom_id=10, category='Dj')
>>> post.save()
>>> post
<Post: Test>
>>> from posts.serializers import PostSerializer
>>> serializer = PostSerializer(post)
>>> serializer
PostSerializer(<Post: Test>):
    id = IntegerField(label='ID', read_only=True)
    title = CharField(max_length=100)
    custom_id = IntegerField()
    category = ChoiceField(choices=(('Dj', 'Django'), ('Py', 'Python')))
    publish_date = DateTimeField(read_only=True)
    last_updated = DateTimeField(read_only=True)
>>> serializer.data
{'id': 2, 'title': 'Test', 'custom_id': 10, 'category': 'Dj', 'publish_date': '2023-05-07T08:19:58.360691Z', 'last_updated': '2023-05-07T08:19:58.361120Z'}
>>> from rest_framework.parsers import JSONParser
>>> from rest_framework.renderers import JSONRenderer
>>> content = JSONRenderer().render(serializer.data)
>>> content
b'{"id":2,"title":"Test","custom_id":10,"category":"Dj","publish_date":"2023-05-07T08:19:58.360691Z","last_updated":"2023-05-07T08:19:58.361120Z"}'
>>> type(content)
<class 'bytes'>

>>> import io
>>> stream = io.BytesIO(content)
>>> stream
<_io.BytesIO object at 0x1068f1440>
>>> data = JSONParser().parse(stream)
>>> data
{'id': 2, 'title': 'Test', 'custom_id': 10, 'category': 'Dj', 'publish_date': '2023-05-07T08:19:58.360691Z', 'last_updated': '2023-05-07T08:19:58.361120Z'}
>>> type(data)
<class 'dict'>

>>> deserialized = PostSerializer(data=data)
>>> deserialized
PostSerializer(data={'id': 2, 'title': 'Test', 'custom_id': 10, 'category': 'Dj', 'publish_date': '2023-05-07T08:19:58.360691Z', 'last_updated': '2023-05-07T08:19:58.361120Z'}):
    id = IntegerField(label='ID', read_only=True)
    title = CharField(max_length=100)
    custom_id = IntegerField()
    category = ChoiceField(choices=(('Dj', 'Django'), ('Py', 'Python')))
    publish_date = DateTimeField(read_only=True)
    last_updated = DateTimeField(read_only=True)
>>> deserialized.is_valid()
True