****************************************FIZZ_BUZZ**************************************

for (let i = 0; i <= 100; i++) {
    let output = '';
    if (i % 3 === 0 && i % 5 === 0) {
        output += 'FizzBuzz'
    } else if (i % 5 === 0) {
        output += 'Buzz'
    } else if (i % 3 === 0) {
        output += 'Fizz'
    }
    console.log(output || i)
}


****************************************PALINDROME_CHECKER*****************************

function isPalindrome(str) {
  const cleanedStr = str.toLowerCase().replace(/[^a-z0-9]/g, '');
  const reversedStr = cleanedStr.split('').reverse().join('');
  return cleanedStr === reversedStr;
}

****************************************REVERSE_STRING*********************************

function reverseStr(str) {
    let revStr = '';
    for (let i = str.length - 1; i >= 0; i--) {
        revStr += str[i] // or str.charAt(i)
    }
    return revStr
}

****************************************FIND_MISSING_NUMBER****************************

function findMissingNumber(arr) {
  const n = arr.length + 1;
  const sum = (n * (n + 1)) / 2;
  const arrSum = arr.reduce((acc, num) => acc + num);
  return sum - arrSum;
}

****************************************SORT_ARRAY(ANAGRAM)****************************

function checkAnagram(s,t) {
	let s_s = []; // or const s_s = s.split('').sort().join('');
	let t_t = [];
	for (i=0;i<s.length;i++) { 
		s_s.push(s[i]);
	}
	for (i=0;i<t.length;i++) {
		t_t.push(t[i]);
	}
	return s_s.sort() === t_t.sort();

	}
}

****************************************GROUP_ANAGRAM**********************************

function groupAnagrams(strs) {
    const anagramGroups = {};

    for (const str of strs) {
        // Sort the characters in the string to get the key for grouping anagrams
        const sortedStr = str.split('').sort().join('');

        // Add the current string to the anagram group
        if (!anagramGroups[sortedStr]) {
            anagramGroups[sortedStr] = [str];
        } else {
            anagramGroups[sortedStr].push(str);
        }
    }

    // Convert the values of the HashMap into an array and return the result
    return Object.values(anagramGroups);
}

****************************************BUBBLE_SORT*************************************

function bubbleSort(arr) {
  for (let i = 0; i < arr.length - 1; i++) {
    for (let j = 0; j < arr.length - i - 1; j++) {
      if (arr[j] > arr[j + 1]) {
        [arr[j], arr[j + 1]] = [arr[j + 1], arr[j]];
      }
    }
  }
  return arr;
}

****************************************CHECK_VOWELS************************************

function checkVowels(str) {
    let str2 = '';
    for (let i=0; i<str.length; i++) {
        if (str[i].match(/[aeiou]/i)) {

        } else {
            str2 += str[i]
        }
    } 
    return str2
}

****************************************NUMS_DIVISORS***********************************

function divisors(integer) {
  let arr_res = [];
  let prime;

  for (let i = 2; i < integer; i++) {
    if (integer % i === 0) {
      arr_res.push(i);
    } else {
      prime = integer;
    }
  }

  if (arr_res.length > 0) {
    return arr_res;
  } else {
    return `${prime} is prime`;
  }
}




